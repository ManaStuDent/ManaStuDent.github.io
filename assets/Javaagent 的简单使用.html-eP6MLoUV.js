import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as t,c as n,b as i,a,d as o}from"./app-CFztFvlF.js";const l={},s=a("p",null,"最近在使用 LiteFlow 的时候有发现控制台会打印这个 logo，就是类似于 SpringBoot 启动的那个 ASIIC 画的一个图标。于是乎我就找文档看看是否能够将这个 logo 给去掉。 但是好像没有发现有哪里配置能够将这个 logo 给去除掉。当然这个 logo 是一个 info 级别的 log 打印，正式使用的时候不会打印出来。但就是想给它去掉，咋弄呢？这个时候想了 Javaagent 这个技术。",-1),r=o(`<h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍"><span>介绍</span></a></h2><p>LiteFlow 打印 logo 的方法在 <code>com.yomahub.liteflow.util.LOGOPrinter#print</code>，这里没有什么配置可以进行控制，只要用这个框架就会打印 info 级别的日志，并将 logo 输出到控制台或者文件中。 我想利用 javaagent 重写 print 方法，直接将其配置成空方法或者输出点其他什么的就好。</p><p>话不多说，先上代码。</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>package com.manastudent.agent;

import net.bytebuddy.agent.builder.AgentBuilder;
import net.bytebuddy.implementation.MethodDelegation;
import net.bytebuddy.matcher.ElementMatchers;

import java.lang.instrument.Instrumentation;

public class MyAgent {
    public static void premain(String agentOps, Instrumentation inst) {
        new AgentBuilder.Default()
                .type(ElementMatchers.named(&quot;com.yomahub.liteflow.util.LOGOPrinter&quot;))
                .transform((builder, typeDescription, classLoader, module)
                        -&gt; builder.method(ElementMatchers.named(&quot;print&quot;))
                        .intercept(
                                MethodDelegation.to(MyAgent.class)
                        )).installOn(inst);
    }

    public static void print() {
        System.out.println(&quot;hello this is agent&quot;);
    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里为了简单还有代码的可阅读性使用了 <code>bytebuddy</code> 这个框架，这个框架我也不是很熟悉，第一次使用，后面有机会好好学习一下。</p><p>代码很简单，就是找到打印日志的类，然后替换掉它的 print 方法。</p><h2 id="原理" tabindex="-1"><a class="header-anchor" href="#原理"><span>原理</span></a></h2><p>Java 代理 (agent) 是在你的main方法前的一个拦截器 (interceptor)，也就是在 mai n方法执行之前，执行 agent 的代码。现在 IntelliJ IDEA 的破解（2022.1）还有以前的一些版本基本上都是利用这个技术进行破解的。还有阿里巴巴的 Arthas 应该也是。</p><h2 id="编码" tabindex="-1"><a class="header-anchor" href="#编码"><span>编码</span></a></h2><p>写一个 Javaagent 需要注意一些事项，下面都是基于 IDEA。</p><p>因为 Javaagent 的特殊性，需要一些特殊的配置，在 META-INF 目录下创建 MANIFEST.MF 文件</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>Manifest-Version: 1.0
Premain-Class: com.manastudent.agent.MyAgent

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最小配置就上面 <strong>三行</strong> 代码，注意最后一行有一个空白行，为什么要，我暂时不清楚。</p><p>IDEA 打包的时候要注意，需要在 <code>Project Struct</code> 然后在 <code>Artifacts</code> 中新增一个 <code>JAR -&gt; Empty</code> 即可，最后使用菜单栏上面的 <code>Build -&gt; Build Artifacts</code> 即可在项目根目录下生成一个 <code>out</code> 文件夹。</p><figure><img src="https://img2022.cnblogs.com/blog/622937/202205/622937-20220506160010297-76490622.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://img2022.cnblogs.com/blog/622937/202205/622937-20220506160022419-535108494.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>`,16);function d(c,g){return t(),n("div",null,[s,i(" more "),r])}const u=e(l,[["render",d],["__file","Javaagent 的简单使用.html.vue"]]),v=JSON.parse('{"path":"/posts/Javaagent%20%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8.html","title":"Javaagent 的简单使用","lang":"zh-CN","frontmatter":{"title":"Javaagent 的简单使用","icon":"circle-info","cover":null,"star":true,"tag":["java"],"date":"2024-04-24T00:00:00.000Z","description":"最近在使用 LiteFlow 的时候有发现控制台会打印这个 logo，就是类似于 SpringBoot 启动的那个 ASIIC 画的一个图标。于是乎我就找文档看看是否能够将这个 logo 给去掉。 但是好像没有发现有哪里配置能够将这个 logo 给去除掉。当然这个 logo 是一个 info 级别的 log 打印，正式使用的时候不会打印出来。但就是想给...","head":[["meta",{"property":"og:url","content":"https://manastudent.github.io/posts/Javaagent%20%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8.html"}],["meta",{"property":"og:title","content":"Javaagent 的简单使用"}],["meta",{"property":"og:description","content":"最近在使用 LiteFlow 的时候有发现控制台会打印这个 logo，就是类似于 SpringBoot 启动的那个 ASIIC 画的一个图标。于是乎我就找文档看看是否能够将这个 logo 给去掉。 但是好像没有发现有哪里配置能够将这个 logo 给去除掉。当然这个 logo 是一个 info 级别的 log 打印，正式使用的时候不会打印出来。但就是想给..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://img2022.cnblogs.com/blog/622937/202205/622937-20220506160010297-76490622.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-25T01:17:29.000Z"}],["meta",{"property":"article:author","content":"ChengLoong"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:published_time","content":"2024-04-24T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-25T01:17:29.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Javaagent 的简单使用\\",\\"image\\":[\\"https://img2022.cnblogs.com/blog/622937/202205/622937-20220506160010297-76490622.png\\",\\"https://img2022.cnblogs.com/blog/622937/202205/622937-20220506160022419-535108494.png\\"],\\"datePublished\\":\\"2024-04-24T00:00:00.000Z\\",\\"dateModified\\":\\"2024-04-25T01:17:29.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ChengLoong\\",\\"url\\":\\"https://manastudent.github.io\\"}]}"]]},"headers":[{"level":2,"title":"介绍","slug":"介绍","link":"#介绍","children":[]},{"level":2,"title":"原理","slug":"原理","link":"#原理","children":[]},{"level":2,"title":"编码","slug":"编码","link":"#编码","children":[]}],"git":{"createdTime":1714007849000,"updatedTime":1714007849000,"contributors":[{"name":"LiuChenglong","email":"long7@vip.qq.com","commits":1}]},"readingTime":{"minutes":2.03,"words":609},"filePathRelative":"posts/Javaagent 的简单使用.md","localizedDate":"2024年4月24日","excerpt":"<p>最近在使用 LiteFlow 的时候有发现控制台会打印这个 logo，就是类似于 SpringBoot 启动的那个 ASIIC 画的一个图标。于是乎我就找文档看看是否能够将这个 logo 给去掉。\\n但是好像没有发现有哪里配置能够将这个 logo 给去除掉。当然这个 logo 是一个 info 级别的 log 打印，正式使用的时候不会打印出来。但就是想给它去掉，咋弄呢？这个时候想了 Javaagent 这个技术。</p>\\n","autoDesc":true}');export{u as comp,v as data};
